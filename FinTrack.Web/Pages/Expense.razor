@page "/expenses"
@inject IExpenseService ExpenseService
@inject IExpenseCategoryService ExpenseCategoryService
@inject NavigationManager Nav
@attribute [Authorize]

<div class="container mt-4">
    <!-- Title and Add Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="text-title"><i class="fas fa-receipt"></i> Xarajatlar</h3>
        <button class="btn btn-primary fab-btn" @onclick="ShowAddModal">
            <i class="fas fa-plus"></i>
        </button>
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <!-- Search and Filter -->
    <div class="card shadow-sm p-4 mb-3">
        <div class="row">
            <div class="col-md-6 mb-3 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control input-field" placeholder="Xarajatlarni qidirish" @onchange="SearchExpenses" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-filter"></i></span>
                    <select class="form-select input-field" @onchange="FilterByCategory">
                        <option value="0">Barcha kategoriyalar</option>
                        @foreach (var category in expenseCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Expenses Table -->
    <div class="table-responsive">
        <table class="table table-hover align-middle custom-table">
            <thead class="table-header">
                <tr>
                    <th>#</th>
                    <th>Kategoriya</th>
                    <th>Miqdor</th>
                    <th>Tavsif</th>
                    <th>Sana</th>
                    <th>Harakatlar</th>
                </tr>
            </thead>
            <tbody>
                @if (!expenses.Any())
                {
                    <tr>
                        <td colspan="6" class="text-center text-muted">Hech qanday xarajat topilmadi.</td>
                    </tr>
                }
                else
                {
                    @foreach (var (expense, index) in expenses.Select((value, i) => (value, i + 1)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@expense.ExpenseCategory?.Name</td>
                            <td>$@expense.Amount</td>
                            <td>@expense.Description</td>
                            <td>@expense.CreatedAt.ToShortDateString()</td>
                            <td class="action-buttons">
                                <button class="btn btn-icon btn-outline-edit" @onclick="() => ShowEditModal(expense)">
                                    <i class="fas fa-pen"></i>
                                </button>
                                <button class="btn btn-icon btn-outline-delete" @onclick="() => DeleteExpense(expense.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-3 pagination-buttons">
        <button class="btn btn-outline-primary px-4" @onclick="PrevPage" disabled="@(!paginationMetadata.HasPrevious)">
            <i class="fas fa-chevron-left"></i>
        </button>
        <span class="fw-bold">Page @paginationMetadata.CurrentPage of @paginationMetadata.TotalPages</span>
        <button class="btn btn-outline-primary px-4" @onclick="NextPage" disabled="@(!paginationMetadata.HasNext)">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>

    <!-- Modal for Add/Edit -->
    @if (showModal)
    {
        <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditing ? "Xarajatlarni tahrirlash" : "Xarajat qo‘shish")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Kategoriya</label>
                            <select class="form-select" @bind="selectedExpense.ExpenseCategoryId">
                                <option value="0">Kategoriyani tanlang</option>
                                @foreach (var category in expenseCategories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Miqdor</label>
                            <input type="number" class="form-control" @bind="selectedExpense.Amount" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tavsif</label>
                            <input type="text" class="form-control" @bind="selectedExpense.Description" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Yopish</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveExpense">Saqlash</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Custom Styles -->
<style>
    .text-title {
        font-weight: bold;
        color: #333;
    }

    .fab-btn {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }

    .input-field {
        border-radius: 8px;
        font-size: 16px;
        padding: 10px;
    }

    .table-header {
        background: #007bff;
        color: white;
    }

    .custom-table td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .btn-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        font-size: 16px;
        border: 1px solid;
        transition: all 0.3s ease-in-out;
    }

    .btn-outline-edit {
        border-color: #007bff;
        color: #007bff;
        background: transparent;
    }

    .btn-outline-delete {
        border-color: #e53935;
        color: #e53935;
        background: transparent;
    }

    .btn-icon:hover {
        background: rgba(0, 0, 0, 0.1);
    }

    .pagination-buttons {
        padding-bottom: 20px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

@code {
    private List<ExpenseForResultDto> expenses = new();
    private List<ExpenseCategoryForResultDto> expenseCategories = new();
    private ExpenseForCreationDto selectedExpense = new();
    private string searchQuery = string.Empty;
    private long selectedCategoryId = 0;
    private string errorMessage = string.Empty;
    private bool showModal = false;
    private bool isEditing = false;
    private long editingExpenseId = 0;
    private PaginationMetadata paginationMetadata = new() { CurrentPage = 1, TotalPages = 1 };

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadExpenses();
    }

    private async Task LoadExpenses()
    {
        try
        {
            errorMessage = string.Empty;
            var response = selectedCategoryId == 0
                ? await ExpenseService.RetrieveAllAsync(paginationMetadata.CurrentPage, 10)
                : await ExpenseService.RetrieveByCategoryIdAsync(selectedCategoryId, paginationMetadata.CurrentPage, 10);
            expenses = response.Data.ToList();
            paginationMetadata = response.Pagination;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading expenses: {ex.Message}";
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            errorMessage = string.Empty;
            expenseCategories = (await ExpenseCategoryService.RetrieveAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private async Task SearchExpenses(ChangeEventArgs e)
    {
        try
        {
            errorMessage = string.Empty;
            searchQuery = e.Value?.ToString() ?? string.Empty;
            var response = string.IsNullOrWhiteSpace(searchQuery)
                ? await ExpenseService.RetrieveAllAsync(paginationMetadata.CurrentPage, 10)
                : await ExpenseService.SearchByNameAsync(searchQuery, paginationMetadata.CurrentPage, 10);
            expenses = response.Data.ToList();
            paginationMetadata = response.Pagination;
            StateHasChanged(); // ✅ Ensure UI updates
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching expenses: {ex.Message}";
        }
    }

    private async Task FilterByCategory(ChangeEventArgs e)
    {
        try
        {
            errorMessage = string.Empty;
            selectedCategoryId = long.Parse(e.Value?.ToString() ?? "0");
            paginationMetadata.CurrentPage = 1; // Reset to first page on filter
            await LoadExpenses();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error filtering by category: {ex.Message}";
        }
    }

    private void ShowAddModal()
    {
        selectedExpense = new ExpenseForCreationDto();
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(ExpenseForResultDto expense)
    {
        selectedExpense = new ExpenseForCreationDto
        {
            ExpenseCategoryId = expense.ExpenseCategoryId,
            Amount = expense.Amount,
            Description = expense.Description
        };
        editingExpenseId = expense.Id;
        isEditing = true;
        showModal = true;
    }

    private async Task SaveExpense()
    {
        try
        {
            errorMessage = string.Empty;
            if (selectedExpense.ExpenseCategoryId == 0)
            {
                errorMessage = "Please select a category.";
                return;
            }
            if (selectedExpense.Amount <= 0)
            {
                errorMessage = "Amount must be greater than zero.";
                return;
            }

            if (isEditing)
            {
                await ExpenseService.UpdateAsync(editingExpenseId, new ExpenseForUpdateDto
                {
                    ExpenseCategoryId = selectedExpense.ExpenseCategoryId,
                    Amount = selectedExpense.Amount,
                    Description = selectedExpense.Description
                });
            }
            else
            {
                await ExpenseService.AddAsync(selectedExpense);
            }

            showModal = false;
            isEditing = false;
            selectedExpense = new ExpenseForCreationDto();
            await LoadExpenses();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
        }
    }

    private async Task DeleteExpense(long id)
    {
        try
        {
            errorMessage = string.Empty;
            await ExpenseService.DeleteAsync(id);
            await LoadExpenses();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting expense: {ex.Message}";
        }
    }

    private async Task PrevPage()
    {
        if (paginationMetadata.HasPrevious)
        {
            paginationMetadata.CurrentPage--;
            await LoadExpenses();
        }
    }

    private async Task NextPage()
    {
        if (paginationMetadata.HasNext)
        {
            paginationMetadata.CurrentPage++;
            await LoadExpenses();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedExpense = new ExpenseForCreationDto();
        isEditing = false;
        errorMessage = string.Empty;
    }
}