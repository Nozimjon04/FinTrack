@page "/profile"
@attribute [Authorize]
@inject IUserService UserService
@inject NavigationManager Nav

<div class="profile-container">
    <h3 class="profile-title">Profile</h3>
    <p class="profile-subtitle">Manage your personal settings</p>

    @if (user != null)
    {
        <div class="profile-card">
            <div class="profile-header">
                <div class="profile-info">
                    <h4>@user.FullName</h4>
                    <p class="profile-email">@user.Email</p>
                </div>
            </div>

            <EditForm Model="@user" OnValidSubmit="UpdateProfile">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Full Name:</label>
                    <InputText @bind-Value="user.FullName" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Update Profile</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(message))
            {
                <p class="alert alert-info">@message</p>
            }
        </div>
    }
    else
    {
        <p class="loading-text">Loading profile...</p>
    }
</div>

<style>
    /* Center everything */
    .profile-container {
        text-align: center;
        margin-top: 40px;
    }

    .profile-title {
        font-size: 32px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .profile-subtitle {
        color: #555;
        font-size: 16px;
        margin-bottom: 20px;
    }

    /* Profile card */
    .profile-card {
        max-width: 420px;
        margin: 20px auto;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        text-align: center;
    }

    /* Profile header with avatar */
    .profile-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    .profile-avatar {
        width: 85px;
        height: 85px;
        border-radius: 50%;
        border: 3px solid #ddd;
    }

    .profile-info h4 {
        font-size: 20px;
        margin-bottom: 3px;
    }

    .profile-email {
        color: #666;
        font-size: 14px;
    }

    /* Form styling */
    .form-group {
        text-align: left;
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0px 0px 8px rgba(0, 123, 255, 0.2);
        }

        .form-control.disabled {
            background-color: #f5f5f5;
            color: #777;
            cursor: not-allowed;
        }

    /* Update button */
    .btn-primary {
        background: linear-gradient(to right, #007bff, #0056b3);
        color: white;
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        width: 100%;
        transition: 0.3s;
    }

        .btn-primary:hover {
            background: linear-gradient(to right, #0056b3, #004494);
        }

    /* Alert message */
    .alert {
        margin-top: 15px;
        font-size: 14px;
        background: #e9f7ef;
        color: #2c8a5f;
        padding: 10px;
        border-radius: 6px;
    }

    .loading-text {
        text-align: center;
        font-size: 16px;
        color: #666;
    }
</style>

@code {
    private UserForResultDto user;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        try
        {
            user = await UserService.RetrieveProfileAsync();
        }
        catch (Exception ex)
        {
            message = "Failed to load profile.";
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            var updateDto = new UserForUpdateDto
                {
                    FullName = user.FullName
                };

            var response = await UserService.UpdateProfileAsync(user.Id, updateDto);
            message = response.Message;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
